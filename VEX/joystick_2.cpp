#pragma config(Sensor, dgtl1,  ,               sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  ,               sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  ,               sensorQuadEncoder)
#pragma config(Sensor, dgtl11, ,               sensorQuadEncoder)
#pragma config(Motor,  port2,           rback,         tmotorVex393TurboSpeed_MC29, PIDControl, encoderPort, dgtl3)
#pragma config(Motor,  port3,           lback,         tmotorVex393TurboSpeed_MC29, PIDControl, reversed, encoderPort, dgtl11)
#pragma config(Motor,  port6,            ,             tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port7,            ,             tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           rfront,        tmotorVex393TurboSpeed_MC29, PIDControl, reversed, encoderPort, dgtl5)
#pragma config(Motor,  port9,           lfront,        tmotorVex393TurboSpeed_MC29, PIDControl, encoderPort, dgtl1)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int JTolerance = 64;

int cutThreshold(int x)
{
  if(abs(x)<JTolerance){
  	return 0;
	}else{
		return x;
	}
}

int max(int a, int b){
	return a>b?a:b;
}


task main()
{
	int stRightX;
	int stLeftX;
	int stLeftY;

	double fLeft = 1;
	double fRight = 1;
	while (1)
	{
		stLeftY = cutThreshold(vexRT[Ch3]);
		stLeftX = cutThreshold(vexRT[Ch4]);
		stRightX = cutThreshold(vexRT[Ch1]);
		//set the motor
		int speed = 0+(max(abs(stLeftX),abs(stLeftY))-JTolerance)/(127.0-JTolerance)*128;
		if(stRightX<0){
			speed = (abs(stRightX)-JTolerance)/(127.0-JTolerance)*128;
			fLeft = 1.0-abs(stRightX)/128.0*2.0;
			fRight = 1.0;
			setMotor(lback,speed*fLeft);
			setMotor(lfront,speed*fLeft);
			setMotor(rback,speed*fRight);
			setMotor(rfront,speed*fRight);
		}else if(stRightX>0){
			speed = (abs(stRightX)-JTolerance)/(127.0-JTolerance)*128;
			fLeft = 1.0;
			fRight = 1.0-abs(stRightX)/128.0*2.0;
			setMotor(lback,speed*fLeft);
			setMotor(lfront,speed*fLeft);
			setMotor(rback,speed*fRight);
			setMotor(rfront,speed*fRight);
		}else if(stLeftX<0){
			//left
			setMotor(lback,speed);
			setMotor(lfront,-speed);
			setMotor(rback,-speed);
			setMotor(rfront,speed);
		}else if(stLeftX>0){
			//right
			setMotor(lback,-speed);
			setMotor(lfront,speed);
			setMotor(rback,speed);
			setMotor(rfront,-speed);
		}else if(stLeftY>0){
			//forward
			setMotor(lback,speed);
			setMotor(lfront,speed);
			setMotor(rback,speed);
			setMotor(rfront,speed);
		}else if(stLeftY<0){
			//backward
			setMotor(lback,-speed);
			setMotor(lfront,-speed);
			setMotor(rback,-speed);
			setMotor(rfront,-speed);
		}else if(vexRT[btn7U]==1){
			setMotor(port6,127);
			setMotor(port7,127);
		}else if(vexRT[btn7D]==1){
			setMotor(port6,-127);
			setMotor(port7,-127);
		}else{
			stopAllMotors();
		}





	}
}
