#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  leftlift,       sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  rightlift,      sensorQuadEncoder)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_3,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_4,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_5,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_6,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,           lmobile,       tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           rwheels,       tmotorVex393TurboSpeed_MC29, openLoop, reversed, encoderPort, I2C_2)
#pragma config(Motor,  port3,           lwheels,       tmotorVex393TurboSpeed_MC29, openLoop, encoderPort, I2C_3)
#pragma config(Motor,  port4,           ltlift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           rtlift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           lblift,        tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_5)
#pragma config(Motor,  port7,           rblift,        tmotorVex393_MC29, openLoop, encoderPort, I2C_4)
#pragma config(Motor,  port8,           flip,          tmotorVex393_MC29, openLoop, encoderPort, I2C_6)
#pragma config(Motor,  port9,           claw,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          rmobile,       tmotorVex393_HBridge, openLoop, encoderPort, I2C_1)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

// Timer Note:
// T1 : PID Controller
// T2 : Lift Speed limiter

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                             Utility Function                              */
/*                                                                           */
/*---------------------------------------------------------------------------*/


int min(int a, int b){
	return a<b?a:b;
}

int max(int a, int b){
	return a>b?a:b;
}

int bound(int x, int a, int b){
	return max(a,min(x,b));
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              PID Controller                               */
/*                                                                           */
/*---------------------------------------------------------------------------*/

#define PIDC 5
#define DEADBAND 50

float kp[10],ki[10],kd[10];
float lastE[10];
float lastI[10];
int target[10];
int pido[10];
int rpos[10];
int lim[10];

void updatePID(){
	int tdiff = time1[T1];

	if(tdiff>=DEADBAND){
		for(int ch = 0; ch < PIDC; ch++){
			float ci, cd, et, sum;
			//calculate error
			et = target[ch]-rpos[ch];
			// "i" and "d"
			cd = (et-lastE[ch])/tdiff;
			// calculate I term + something that I forgot the name lol
			if((int)kp[ch]*et==bound((int)kp[ch]*et,-lim[ch],lim[ch])){
				ci = lastI[ch] + (lastE[ch]+et)/2.0*tdiff;
			}else{
				ci = 0;
			}

			lastE[ch] = et;
			lastI[ch] = ci;
			sum = kp[ch]*et + ki[ch]*ci + kd[ch]*cd;

			pido[ch] = bound((int)sum,-lim[ch],lim[ch]);
		}
		clearTimer(T1);
	}
}

// Ch0 = Right lift
// Ch1 = Left lift
// Ch2 = Right Wheel
// Ch3 = Left Wheel
void updateMovement(){
	//update encoder value
	rpos[0] = nMotorEncoder[rblift];
	rpos[1] = nMotorEncoder[lblift];
	rpos[2] = nMotorEncoder[rwheels];
	rpos[3] = nMotorEncoder[lwheels];

	//recalculate PID
	updatePID();

	//update motor value
	if(!vexRT[Btn7U]){
		motor[rblift] = pido[0];
		motor[rtlift] = pido[0];
		motor[lblift] = pido[1];
		motor[ltlift] = pido[1];
	}else{
		motor[rblift] = 0;
		motor[rtlift] = 0;
		motor[lblift] = 0;
		motor[ltlift] = 0;
	}
	//motor[rwheels] = pido[2];
	//motor[lwheels] = pido[3];
}


/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                         Specific Movement Code                            */
/*                                                                           */
/*---------------------------------------------------------------------------*/

int liftOrigin;
bool isFlipRect;

void pickMobile(){
	while(nMotorEncoder[rmobile]<700){
		motor[rmobile] = -128;
		motor[lmobile] = -128;
	}
	motor[rmobile] = 0;
	motor[lmobile] = 0;
}

void dropMobile(){
	while(nMotorEncoder[rmobile]>50){
		motor[rmobile] = 128;
		motor[lmobile] = 128;
	}
	motor[rmobile] = 0;
	motor[lmobile] = 0;
}

void pickCone(){
	if(isFlipRect){
		while(nMotorEncoder[flip]<430){
			motor[flip] = 128;
		}
		motor[flip] = 0;
		motor[claw] = -80;
	}else{
		while(nMotorEncoder[flip]>40){
			motor[flip] = -128;
		}
		motor[flip] = 0;
		motor[claw] = 80;
		wait(0.2);
		motor[claw] = 0;
	}
	isFlipRect = !isFlipRect;
}

void liftUp(){
	int newPos = liftOrigin+time1[T2]/3;
	newPos = bound(newPos, 200, 600);
	target[0] = newPos;
	target[1] = newPos;
}

void liftDown(){
	int newPos = liftOrigin-time1[T2]/3;
	newPos = bound(newPos, 200, 600);
	target[0] = newPos;
	target[1] = newPos;
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                         Specific Movement Code                            */
/*                                                                           */
/*---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...

  // reset PID
  for(int i = 0; i < PIDC; i++){
		lastE[i] = 0.0;
		lastI[i] = 0.0;
		target[i] = 0;
		pido[i] = 0;
		rpos[i] = 0;
	}
	// config all cons
	// Ch0 = Right lift
	kp[0] = 1;
	kd[0] = 100;
	ki[0] = 0.0001;
	lim[0] = 100;

	// Ch1 = Left lift
	kp[1] = 1;
	kd[1] = 100;
	ki[1] = 0.0001;
	lim[1] = 100;

	// Ch2 = Right Wheels
	kp[2] = 0.5;
	kd[2] = 0;
	ki[2] = 0.00000;
	lim[2] = 100;

	// Ch3 = Left Wheels
	kp[3] = 0.5;
	kd[3] = 0;
	ki[3] = 0.00000;
	lim[3] = 100;

	motor[rblift] = -30;
	motor[rtlift] = -30;
	motor[lblift] = -30;
	motor[ltlift] = -30;
	motor[rmobile] = 50;
	motor[lmobile] = 50;
	motor[flip] = -30;
	wait(1);
	motor[rblift] = 0;
	motor[rtlift] = 0;
	motor[lblift] = 0;
	motor[ltlift] = 0;
	motor[flip] = 0;
	wait(1);
	motor[rmobile] = 0;
	motor[lmobile] = 0;

	//reset encoder
	nMotorEncoder[lwheels] = 0;
	nMotorEncoder[rwheels] = 0;
	nMotorEncoder[flip] = 0;
	nMotorEncoder[rmobile] = 0;
	nMotorEncoder[rblift] = 0;
	nMotorEncoder[lblift] = 0;

	liftOrigin = 200;
	isFlipRect = true;

	clearTimer(T1);
	clearTimer(T2);
}



/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void resetWheels(){
	nMotorEncoder[rwheels] = 0;
	nMotorEncoder[lwheels] = 0;
}

task autonomous()
{
  // ..........................................................................
  // Insert user code here.
  // ..........................................................................

  // 90 turn
	resetWheels();
  while(nMotorEncoder[rwheels]<500){
  	motor[rwheels] = 100;
  	motor[lwheels] = -100;
	}

  // walk front
	resetWheels();
	while(nMotorEncoder[rwheels]<500){
  	motor[rwheels] = 100;
  	motor[lwheels] = 100;
	}

	// 45 turn
	resetWheels();
  while(nMotorEncoder[rwheels]<500){
  	motor[rwheels] = -100;
  	motor[lwheels] = 100;
	}

	// walk front
	resetWheels();
	while(nMotorEncoder[rwheels]<500){
  	motor[rwheels] = 100;
  	motor[lwheels] = 100;
	}

	motor[rwheels] = 0;
  motor[lwheels] = 0;

}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
  // User control code here, inside the loop

  while (true)
  {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

  	// Tank Drive
  	motor[lwheels] = vexRT[Ch3];
  	//motor[lblift] = vexRT[Ch3];
		//motor[ltlift] = vexRT[Ch3];

  	motor[rwheels] = vexRT[Ch2];

  	// Lift up, down
  	if(vexRT[Btn5U]){
  		//go up
  		liftUp();
  	}else if(vexRT[Btn5D]){
  		//go down
  		liftDown();
  	}else{
  		liftOrigin = target[0];
  		clearTimer(T2);
  	}

  	// Mobile goal
  	// TODO: Assign Button
  	if(vexRT[Btn8U]){
  		pickMobile();
  	}else if(vexRT[Btn8D]){
  		dropMobile();
  	}

  	// Pickup cone
  	// TODO: Assign Button
  	if(vexRT[Btn6U]){
  		pickCone();
  	}

  	if(vexRT[Btn7L]){
  		pre_auton();
  	}

  	updateMovement();
  	writeDebugStreamLine("Encoder D:%d (T.%d) R:(R.%d P.%d) L:(R.%d P.%d)", kd[0], target[0], rpos[0], pido[0], rpos[1], pido[1]);
  }
}
